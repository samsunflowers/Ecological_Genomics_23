# plotting the GO tree with the cut level (un-remark the next two lines to plot)
plot(results[[2]],cex=0.6)
abline(h=hcut,col="red")
# cutting
ct=cutree(results[[2]],h=hcut)
annots=c();ci=1
for (ci in unique(ct)) {
message(ci)
rn=names(ct)[ct==ci]
obs=grep("obsolete",rn)
if(length(obs)>0) { rn=rn[-obs] }
if (length(rn)==0) {next}
rr=results[[1]][rn,]
bestrr=rr[which(rr$pval==min(rr$pval)),]
best=1
if(nrow(bestrr)>1) {
nns=sub(" .+","",row.names(bestrr))
fr=c()
for (i in 1:length(nns)) { fr=c(fr,eval(parse(text=nns[i]))) }
best=which(fr==max(fr))
}
if (bestrr$pval[best]<=pcut) { annots=c(annots,sub("\\d+\\/\\d+ ","",row.names(bestrr)[best]))}
}
mwus=read.table(paste("MWU",goDivision,input,sep="_"),header=T)
bestGOs=mwus[mwus$name %in% annots,]
bestGOs
View(mwus)
View(bestGOs)
View(TonsaF1topGO)
################################################################
# First, press command-D on mac or ctrl-shift-H in Rstudio and navigate to the directory containing scripts and input files. Then edit, mark and execute the following bits of code, one after another.
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/scripts/GOMWU")
# TONSA F3
input="res_Tonsa_F3_HHHHvsAAAA_LFC.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="dge_F3_GOterms.corrected.out" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
# Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
# Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
View(TonsaF3topGO)
View(TonsaF3topGO)
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.0005, # FDR cutoff to print in regular (not italic) font.
level3=0.0001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
TonsaF1topGO <- data.frame(results[[1]])
TonsaF1topGO
TonsaF3topGO <- data.frame(results[[1]])
TonsaF3topGO
pcut=0.05 # adjusted pvalue cutoff for representative GO
hcut=0.9 # height at which cut the GO terms tree to get "independent groups".
# plotting the GO tree with the cut level (un-remark the next two lines to plot)
plot(results[[2]],cex=0.6)
abline(h=hcut,col="red")
# cutting
ct=cutree(results[[2]],h=hcut)
annots=c();ci=1
for (ci in unique(ct)) {
message(ci)
rn=names(ct)[ct==ci]
obs=grep("obsolete",rn)
if(length(obs)>0) { rn=rn[-obs] }
if (length(rn)==0) {next}
rr=results[[1]][rn,]
bestrr=rr[which(rr$pval==min(rr$pval)),]
best=1
if(nrow(bestrr)>1) {
nns=sub(" .+","",row.names(bestrr))
fr=c()
for (i in 1:length(nns)) { fr=c(fr,eval(parse(text=nns[i]))) }
best=which(fr==max(fr))
}
if (bestrr$pval[best]<=pcut) { annots=c(annots,sub("\\d+\\/\\d+ ","",row.names(bestrr)[best]))}
}
mwus=read.table(paste("MWU",goDivision,input,sep="_"),header=T)
bestGOs=mwus[mwus$name %in% annots,]
bestGOs
View(TonsaF3topGO)
View(mwus)
View(mwus)
View(mwus)
# Make the rownames a separate column called transcriptID and make it all a dataframe
res_Tonsa_F1_HHHHvsAAAA_df <- data.frame(transcriptID = rownames(res_Tonsa_F1_HHHHvsAAAA), res_Tonsa_F1_HHHHvsAAAA)
res_Tonsa_F3_HHHHvsAAAA_df <- data.frame(transcriptID = rownames(res_Tonsa_F3_HHHHvsAAAA), res_Tonsa_F3_HHHHvsAAAA)
res_Hudsonica_F0_OWAvsAM_df <- data.frame(transcriptID = rownames(res_Hudsonica_F0_OWAvsAM), res_Hudsonica_F0_OWAvsAM)
# Split the "transcriptID" column by double colons and create new columns of the parts
res_Tonsa_F1_HHHHvsAAAA_df <- separate(res_Tonsa_F1_HHHHvsAAAA_df, transcriptID, into = c("part1", "part2", "part3", "rest"), sep = "::", remove = FALSE)
res_Tonsa_F3_HHHHvsAAAA_df <- separate(res_Tonsa_F3_HHHHvsAAAA_df, transcriptID, into = c("part1", "part2", "part3", "rest"), sep = "::", remove = FALSE)
View(res_Tonsa_F1_HHHHvsAAAA_df)
# Create a new column by concatenating "part1" and "part2" with double colons in between
res_Tonsa_F1_HHHHvsAAAA_df$transcriptID_trim <- paste(res_Tonsa_F1_HHHHvsAAAA_df$part1, res_Tonsa_F1_HHHHvsAAAA_df$part2, sep = "::")
res_Tonsa_F3_HHHHvsAAAA_df$transcriptID_trim <- paste(res_Tonsa_F3_HHHHvsAAAA_df$part1, res_Tonsa_F3_HHHHvsAAAA_df$part2, sep = "::")
View(res_Tonsa_F1_HHHHvsAAAA_df)
# Save the selected columns WITH P VAL as a CSV file
write.csv(res_Tonsa_F1_HHHHvsAAAA_df, file = "res_Tonsa_F1_HHHHvsAAAA_LFC.csv", quote = FALSE, row.names = F) # saves the selected columns for GOMWU
write.csv(res_Tonsa_F3_HHHHvsAAAA_df, file = "res_Tonsa_F3_HHHHvsAAAA_LFC.csv", quote = FALSE, row.names = F) # saves the selected columns for GOMWU
# Save the selected columns WITH P VAL as a CSV file
write.csv(res_Tonsa_F1_HHHHvsAAAA_df, file = "res_pval_Tonsa_F1_HHHHvsAAAA_LFC.csv", quote = FALSE, row.names = F) # saves the selected columns for GOMWU
write.csv(res_Tonsa_F3_HHHHvsAAAA_df, file = "res_pval_Tonsa_F3_HHHHvsAAAA_LFC.csv", quote = FALSE, row.names = F) # saves the selected columns for GOMWU
View(mwus)
View(TonsaF3topGO)
View(TonsaF3topGO)
################################################################
# First, press command-D on mac or ctrl-shift-H in Rstudio and navigate to the directory containing scripts and input files. Then edit, mark and execute the following bits of code, one after another.
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/scripts/GOMWU")
# TONSA F1
input="res_Tonsa_F1_HHHHvsAAAA_LFC.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="dge_F1_GOterms.corrected.out" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
# Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
# Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Note that the names are important and have to be specific to line up the diagram
fit1 <- euler(c("F0" = 3637, "F4" = 171, "F0&F4" = 55))
plot(fit1,  lty = 1:3, quantities = TRUE)
plot2 <- plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 4))
annotate_figure(plot2, top = text_grob("Shared Genes per Generation in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 15))
#cross check
3637+224+55+2 #3918, total F0
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.0005, # FDR cutoff to print in regular (not italic) font.
level3=0.0001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
TonsaF1topGO <- data.frame(results[[1]])
TonsaF1topGO
View(TonsaF1topGO)
# import package
library("ggplot2")
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results")
tonsa_go <- read.delim("GO_Tonsa_F1_F3.csv")
View(tonsa_go)
tonsa_go <- read.table("GO_Tonsa_F1_F3.csv")
View(tonsa_go)
tonsa_go <- read.csv("GO_Tonsa_F1_F3.csv")
View(tonsa_go)
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "red", high = "blue") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
library("wesanderson")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = wes_palette("GrandBudapest1"), high = "blue") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = wes_palette("GrandBudapest1"), wes_palette("GrandBudapest1")) +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results")
tonsa_go <- read.csv("GO_Tonsa_F1_F3.csv")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = wes_palette("GrandBudapest1"), wes_palette("GrandBudapest1")) +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval.adj`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = wes_palette("GrandBudapest1"), wes_palette("GrandBudapest1")) +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
tonsa_go <- read.csv("GO_Tonsa_F1_F3.csv")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval.adj`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = wes_palette("GrandBudapest1"), wes_palette("GrandBudapest1")) +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
View(tonsa_go)
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = wes_palette("GrandBudapest1"), wes_palette("GrandBudapest1")) +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
tonsa_go <- read.csv("GO_Tonsa_F1_F3.csv")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = wes_palette("GrandBudapest1"), wes_palette("GrandBudapest1")) +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = wes_palette("GrandBudapest1"), wes_palette("GrandBudapest1")) +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#F1BB7B", high = "#FD6467")) +
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#F1BB7B", high = "#FD6467") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#F1BB7B", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#F1BB7B", high = "#D67236") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#D67236") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
legend("gene")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
legend("gene") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
View(TonsaF1topGO)
View(TonsaF3topGO)
tonsa_go <- read.csv("GO_Tonsa.csv")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.number)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
legend("gene") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.number)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
tonsa_go <- tonsa_go[-c("1")]
tonsa_go <- tonsa_go[-c("1"0,)]
tonsa_go <- tonsa_go[-c("1"),]
tonsa_go <- tonsa_go[-c(1),]
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.number)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
tonsa_go <- tonsa_go[-c(12),]
tonsa_go <- read.csv("GO_Tonsa.csv")
tonsa_go <- read.csv("GO_Tonsa.csv")
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.number)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis")
View(TonsaF3topGO)
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results")
hudsonica_go <- read.csv("GO_Hudsonica.csv")
a
# plot: dot plot
ggplot(data = tonsa_go, aes(x = generation, y = X,
color = `pval`, size = gene.number)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis Tonsa")
ggplot(data = hudsonica_go, aes(x = generation, y = X,
color = `pval`, size = gene.number)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis Hudsonica")
ggplot(data = hudsonica_go, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis Hudsonica")
ggplot(data = hudsonica_go, aes(x = generation, y = X,
color = `pval`, size = gene.rati)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis Hudsonica")
View(hudsonica_go)
View(tonsa_go)
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results")
ALLGOSSSSSS <- read.csv("HELPME.csv")
# plot: dot plot
ggplot(data = ALLGOSSSSSS, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis Tonsa")
# plot: dot plot
ggplot(data = ALLGOSSSSSS, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis all")
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results")
ALLGOSSSSSS <- read.csv("RAHHH.csv")
# plot: dot plot
ggplot(data = ALLGOSSSSSS, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis all")
# plot: dot plot
ggplot(data = ALLGOSSSSSS, aes(x = species, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis all")
View(ALLGOSSSSSS)
ALLGOSSSSSS <- read.csv("UGHHH.csv")
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results")
ALLGOSSSSSS <- read.csv("UGHHH.csv")
ALLGOSSSSSS <- read.csv("UGHHHH.csv")
# plot: dot plot
ggplot(data = ALLGOSSSSSS, aes(x = species, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis all")
# plot: dot plot
ggplot(data = ALLGOSSSSSS, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis all")
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results")
ALLGOSSSSSS <- read.csv("UGHAGAIN.csv")
# plot: dot plot
ggplot(data = ALLGOSSSSSS, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis all")
ALLGOSSSSSS <- read.csv("NOOO.csv")
# plot: dot plot
ggplot(data = ALLGOSSSSSS, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis all")
ALLGOSSSSSS <- read.csv("NOOO.csv")
# plot: dot plot
ggplot(data = ALLGOSSSSSS, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis all")
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results")
ALLGOSSSSSS <- read.csv("Shared_GO.csv")
# plot: dot plot
ggplot(data = ALLGOSSSSSS, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis all")
