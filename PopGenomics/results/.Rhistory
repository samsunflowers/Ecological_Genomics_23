intWA <- intersect(degs_F0_OWAvAM,degs_F4_OWAvAM)
length(intersect(degs_F0_OWAvAM,intWA)) # 57
intWA <- intersect(degs_F11_OWAvAM,degs_F4_OWAvAM)
length(intersect(degs_F0_OWAvAM,intWA)) # 57
intWA <- intersect(degs_F0_OWAvAM,degs_F4_OWAvAM)
length(intersect(degs_F0_OWAvAM,intWA)) # 2
intWA <- intersect(degs_F11_OWAvAM,degs_F4_OWAvAM)
intWA <- intersect(degs_F0_OWAvAM,degs_F4_OWAvAM)
length(intersect(degs_F11_OWAvAM,intWA)) # 2
# Note that the names are important and have to be specific to line up the diagram
fit1 <- euler(c("F0" = 3637, "F4" = 171, "F11" = 1164, "F0&F4" = 55, "F0&F11" = 224, "F11&F4" = 13, "F0&F4&F11" = 2))
plot(fit1,  lty = 1:3, quantities = TRUE)
plot(fit1, quantities = TRUE, fill = "transparent",
lty = 1:3,
labels = list(font = 4))
plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 4))
plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest2"),
lty = 1:3,
labels = list(font = 4))
plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 4))
F0 <- ggplot(dataF0, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-10, 25) + xlim(-40, 10)+ # zoom for F0 with new assembly
scale_shape_manual(values=c(21,22,23,24), labels = c("Ambient", "Acidification","Warming", "OWA"))+
scale_fill_manual(values=wes_palette("GrandBudapest1"), labels = c("Ambient", "Acidification","Warming", "OWA"))+
theme(legend.position = c(0.83,0.85), legend.background = element_blank(), legend.box.background = element_rect(colour = "black")) +
guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(shape = guide_legend(override.aes = list(size = 4)))+
theme_bw() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2))+
theme(text = element_text(size = 15)) +
theme(legend.title = element_blank()) +
ggtitle("F0 Gene Expression Pattern")
###############################################################
dataF0 <- subset(data, generation == 'F0')
F0 <- ggplot(dataF0, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-10, 25) + xlim(-40, 10)+ # zoom for F0 with new assembly
scale_shape_manual(values=c(21,22,23,24), labels = c("Ambient", "Acidification","Warming", "OWA"))+
scale_fill_manual(values=wes_palette("GrandBudapest1"), labels = c("Ambient", "Acidification","Warming", "OWA"))+
theme(legend.position = c(0.83,0.85), legend.background = element_blank(), legend.box.background = element_rect(colour = "black")) +
guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(shape = guide_legend(override.aes = list(size = 4)))+
theme_bw() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2))+
theme(text = element_text(size = 15)) +
theme(legend.title = element_blank()) +
ggtitle("F0 Gene Expression Pattern")
F0
F0 <- ggplot(dataF0, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-10, 25) + xlim(-40, 10)+ # zoom for F0 with new assembly
scale_shape_manual(values=c(21,22,23,24), labels = c("Ambient", "Acidification","Warming", "OWA"))+
scale_fill_manual(values=wes_palette("GrandBudapest1"), labels = c("Ambient", "Acidification","Warming", "OWA"))+
theme(legend.position = c(0.83,0.85), legend.background = element_blank(), legend.box.background = element_rect(colour = "black")) +
guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(shape = guide_legend(override.aes = list(size = 4)))+
theme_bw() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2))+
theme(text = element_text(size = 15)) +
theme(legend.title = element_blank()) +
ggtitle("F0 Gene Expression")
F0
dataF2 <- subset(data, generation == 'F2')
guides(shape = guide_legend(override.aes = list(size = 4))+
F2 <- ggplot(dataF2, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-40, 25) + xlim(-50, 55)+
scale_shape_manual(values=c(21,22,23), labels = c("Ambient", "Acidification","Warming"))+
scale_fill_manual(values=wes_palette("GrandBudapest1"), labels = c("Ambient", "Acidification","Warming"))+
theme(legend.position = c(0.83,0.85), legend.background = element_blank(), legend.box.background = element_rect(colour = "black")) +
guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23))))+
guides(shape = guide_legend(override.aes = list(size = 4)))+
theme_bw() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2))+
theme(text = element_text(size = 15)) +
theme(legend.title = element_blank()) +
ggtitle("F2 Gene Expression Pattern")
F2
F2 <- ggplot(dataF2, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-40, 25) + xlim(-50, 55)+
scale_shape_manual(values=c(21,22,23), labels = c("Ambient", "Acidification","Warming"))+
scale_fill_manual(values=wes_palette("GrandBudapest1"), labels = c("Ambient", "Acidification","Warming"))+
theme(legend.position = c(0.83,0.85), legend.background = element_blank(), legend.box.background = element_rect(colour = "black")) +
guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23))))+
guides(shape = guide_legend(override.aes = list(size = 4)))+
theme_bw() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2))+
theme(text = element_text(size = 15)) +
theme(legend.title = element_blank()) +
ggtitle("F2 Gene Expression Pattern")
F2
F2 <- ggplot(dataF2, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-40, 25) + xlim(-50, 55)+
scale_shape_manual(values=c(21,22,23), labels = c("Ambient", "Acidification","Warming"))+
scale_fill_manual(values=wes_palette("GrandBudapest1"), labels = c("Ambient", "Acidification","Warming"))+
theme(legend.position = c(0.83,0.85), legend.background = element_blank(), legend.box.background = element_rect(colour = "black")) +
guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23))))+
guides(shape = guide_legend(override.aes = list(size = 4)))+
theme_bw() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2))+
theme(text = element_text(size = 15)) +
theme(legend.title = element_blank()) +
ggtitle("F2 Gene Expression")
F2
F4 <- ggplot(dataF4, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-40, 25) + xlim(-50, 55)+ # limits with filtered assembly
scale_shape_manual(values=c(21,22,23,24), labels = c("Ambient", "Acidification","Warming", "OWA"))+
scale_fill_manual(values=wes_palette("GrandBudapest1"), labels = c("Ambient", "Acidification","Warming", "OWA"))+
guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(shape = guide_legend(override.aes = list(size = 4)))+
theme_bw() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2))+
theme(text = element_text(size = 15)) +
theme(legend.title = element_blank()) +
ggtitle("F4 Gene Expression")
dataF4 <- subset(data, generation == 'F4')
F4 <- ggplot(dataF4, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-40, 25) + xlim(-50, 55)+ # limits with filtered assembly
scale_shape_manual(values=c(21,22,23,24), labels = c("Ambient", "Acidification","Warming", "OWA"))+
scale_fill_manual(values=wes_palette("GrandBudapest1"), labels = c("Ambient", "Acidification","Warming", "OWA"))+
guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(shape = guide_legend(override.aes = list(size = 4)))+
theme_bw() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2))+
theme(text = element_text(size = 15)) +
theme(legend.title = element_blank()) +
ggtitle("F4 Gene Expression")
F4
dataF11 <- subset(data, generation == 'F11')
F11 <- ggplot(dataF11, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-45, 25) + xlim(-50, 55)+
scale_shape_manual(values=c(21,24), labels = c("Ambient", "OWA"))+
scale_fill_manual(values=wes_palette("GrandBudapest1"), labels = c("Ambient", "OWA"))+
guides(shape = guide_legend(override.aes = list(shape = c( 21, 24))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21, 24))))+
guides(shape = guide_legend(override.aes = list(size = 4)))+
theme_bw() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2))+
theme(text = element_text(size = 15)) +
theme(legend.title = element_blank()) +
ggtitle("F11 Gene Expression")
F11
ggarrange(F0, F2, F4, F11, nrow = 2, ncol=2)
###############################################################
dataF0 <- subset(data, generation == 'F0')
F0 <- ggplot(dataF0, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-10, 25) + xlim(-40, 10)+ # zoom for F0 with new assembly
scale_shape_manual(values=c(21,22,23,24), labels = c("Ambient", "Acidification","Warming", "Ambient & Warming"))+
scale_fill_manual(values=wes_palette("GrandBudapest1"), labels = c("Ambient", "Acidification","Warming", "Ambient & Warming"))+
theme(legend.position = c(0.83,0.85), legend.background = element_blank(), legend.box.background = element_rect(colour = "black")) +
guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(shape = guide_legend(override.aes = list(size = 4)))+
theme_bw() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2))+
theme(text = element_text(size = 15)) +
theme(legend.title = element_blank()) +
ggtitle("F0 Gene Expression")
F0
dataF2 <- subset(data, generation == 'F2')
F2 <- ggplot(dataF2, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-40, 25) + xlim(-50, 55)+
scale_shape_manual(values=c(21,22,23), labels = c("Ambient", "Acidification","Warming"))+
scale_fill_manual(values=wes_palette("GrandBudapest1"), labels = c("Ambient", "Acidification","Warming"))+
theme(legend.position = c(0.83,0.85), legend.background = element_blank(), legend.box.background = element_rect(colour = "black")) +
guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23))))+
guides(shape = guide_legend(override.aes = list(size = 4)))+
theme_bw() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2))+
theme(text = element_text(size = 15)) +
theme(legend.title = element_blank()) +
ggtitle("F2 Gene Expression")
F2
dataF4 <- subset(data, generation == 'F4')
F4 <- ggplot(dataF4, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-40, 25) + xlim(-50, 55)+ # limits with filtered assembly
scale_shape_manual(values=c(21,22,23,24), labels = c("Ambient", "Acidification","Warming", "Ambient & Warming"))+
scale_fill_manual(values=wes_palette("GrandBudapest1"), labels = c("Ambient", "Acidification","Warming", "Ambient & Warming"))+
guides(shape = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21,22, 23, 24))))+
guides(shape = guide_legend(override.aes = list(size = 4)))+
theme_bw() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2))+
theme(text = element_text(size = 15)) +
theme(legend.title = element_blank()) +
ggtitle("F4 Gene Expression")
F4
dataF11 <- subset(data, generation == 'F11')
F11 <- ggplot(dataF11, aes(PC1, PC2)) +
geom_point(size=10, stroke = 1.5, aes(fill=treatment, shape=treatment)) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
ylim(-45, 25) + xlim(-50, 55)+
scale_shape_manual(values=c(21,24), labels = c("Ambient", "Ambient & Warming"))+
scale_fill_manual(values=wes_palette("GrandBudapest1"), labels = c("Ambient", "Ambient & Warming"))+
guides(shape = guide_legend(override.aes = list(shape = c( 21, 24))))+
guides(fill = guide_legend(override.aes = list(shape = c( 21, 24))))+
guides(shape = guide_legend(override.aes = list(size = 4)))+
theme_bw() +
theme(panel.border = element_rect(color = "black", fill = NA, size = 2))+
theme(text = element_text(size = 15)) +
theme(legend.title = element_blank()) +
ggtitle("F11 Gene Expression")
F11
ggarrange(F0, F4, F11, nrow = 2, ncol=2)
# Filter out genes with too few reads - remove all genes with counts < 15 in more than 75% of samples, so ~28) suggested by WGCNA on RNAseq FAQ
dds <- dds[rowSums(counts(dds) >= 15) >= 28,]
nrow(dds) # 25260, that have at least 15 reads (aka counts) in 75% of the samples
## Set your working directory
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/")
library(WGCNA);
options(stringsAsFactors = FALSE);
################################################################
# First, press command-D on mac or ctrl-shift-H in Rstudio and navigate to the directory containing scripts and input files. Then edit, mark and execute the following bits of code, one after another.
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/GOMWU")
View(res_F0_OWAvAM)
write.csv("res_F0_OWAvsAM")
write.csv(df,"C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/res_F0_OWAvsAM",)
write.csv("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/res_F0_OWAvsAM",)
write.csv("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/res_F0_OWAvsAM.csv",)
write_csv("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/res_F0_OWAvsAM.csv",)
write.csv(res_F0_OWAvsAM, file = "res_F0_OWAvsAM.csv")
# Make the rownames a separate column called transcriptID and make it all a dataframe
res_F0_OWAvAM_df <- data.frame(transcriptID = rownames(res_F0_OWAvAM), res_F0_OWAvAM)
res_F4_OWAvAM_df <- data.frame(transcriptID = rownames(res_F4_OWAvAM), res_F4_OWAvAM)
res_F11_OWAvAM_df <- data.frame(transcriptID = rownames(res_F11_OWAvAM), res_F11_OWAvAM)
# Split the "transcriptID" column by double colons and create new columns of the parts
res_F0_OWAvAM_df <- separate(res_F0_OWAvAM_df, transcriptID, into = c("part1", "part2", "part3", "rest"), sep = "::", remove = FALSE)
res_F4_OWAvAM_df <- separate(res_F4_OWAvAM_df, transcriptID, into = c("part1", "part2", "part3", "rest"), sep = "::", remove = FALSE)
res_F11_OWAvAM_df <- separate(res_F11_OWAvAM_df, transcriptID, into = c("part1", "part2", "part3", "rest"), sep = "::", remove = FALSE)
# Create a new column by concatenating "part1" and "part2" with double colons in between
res_F0_OWAvAM_df$transcriptID_trim <- paste(res_F0_OWAvAM_df$part1, res_F0_OWAvAM_df$part2, sep = "::")
res_F4_OWAvAM_df$transcriptID_trim <- paste(res_F4_OWAvAM_df$part1, res_F4_OWAvAM_df$part2, sep = "::")
res_F11_OWAvAM_df$transcriptID_trim <- paste(res_F11_OWAvAM_df$part1, res_F11_OWAvAM_df$part2, sep = "::")
# Select the two columns we want to save for the GOMWU analysis
selected_columns_OWA_F0 <- res_F0_OWAvAM_df[c("transcriptID_trim", "log2FoldChange")]
selected_columns_OWA_F11 <- res_F11_OWAvAM_df[c("transcriptID_trim", "log2FoldChange")]
selected_columns_OWA_F4 <- res_F4_OWAvAM_df[c("transcriptID_trim", "log2FoldChange")]
# Save the selected columns as a CSV file
write.csv(selected_columns_OWA_F0, file = "res_F0_OWAvAM_LFC.csv", quote = FALSE, row.names = F) # saves the selected columns for GOMWU
write.csv(selected_columns_OWA_F4, file = "res_F4_OWAvAM_LFC.csv", quote = FALSE, row.names = F) # saves the selected columns for GOMWU
write.csv(selected_columns_OWA_F11, file = "res_F11_OWAvAM_LFC.csv", quote = FALSE, row.names = F) # saves the selected columns for GOMWU
View(selected_columns_OWA_F0)
## Set your working directory
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/")
# Make the rownames a separate column called transcriptID and make it all a dataframe
res_F0_OWAvAM_df <- data.frame(transcriptID = rownames(res_F0_OWAvAM), res_F0_OWAvAM)
res_F4_OWAvAM_df <- data.frame(transcriptID = rownames(res_F4_OWAvAM), res_F4_OWAvAM)
res_F11_OWAvAM_df <- data.frame(transcriptID = rownames(res_F11_OWAvAM), res_F11_OWAvAM)
# Split the "transcriptID" column by double colons and create new columns of the parts
res_F0_OWAvAM_df <- separate(res_F0_OWAvAM_df, transcriptID, into = c("part1", "part2", "part3", "rest"), sep = "::", remove = FALSE)
res_F4_OWAvAM_df <- separate(res_F4_OWAvAM_df, transcriptID, into = c("part1", "part2", "part3", "rest"), sep = "::", remove = FALSE)
res_F11_OWAvAM_df <- separate(res_F11_OWAvAM_df, transcriptID, into = c("part1", "part2", "part3", "rest"), sep = "::", remove = FALSE)
# Create a new column by concatenating "part1" and "part2" with double colons in between
res_F0_OWAvAM_df$transcriptID_trim <- paste(res_F0_OWAvAM_df$part1, res_F0_OWAvAM_df$part2, sep = "::")
res_F4_OWAvAM_df$transcriptID_trim <- paste(res_F4_OWAvAM_df$part1, res_F4_OWAvAM_df$part2, sep = "::")
res_F11_OWAvAM_df$transcriptID_trim <- paste(res_F11_OWAvAM_df$part1, res_F11_OWAvAM_df$part2, sep = "::")
# Select the two columns we want to save for the GOMWU analysis
selected_columns_OWA_F0 <- res_F0_OWAvAM_df[c("transcriptID_trim", "log2FoldChange")]
selected_columns_OWA_F4 <- res_F4_OWAvAM_df[c("transcriptID_trim", "log2FoldChange")]
selected_columns_OWA_F11 <- res_F11_OWAvAM_df[c("transcriptID_trim", "log2FoldChange")]
# Save the selected columns as a CSV file
write.csv(selected_columns_OWA_F0, file = "res_F0_OWAvAM_LFC.csv", quote = FALSE, row.names = F) # saves the selected columns for GOMWU
write.csv(selected_columns_OWA_F4, file = "res_F4_OWAvAM_LFC.csv", quote = FALSE, row.names = F) # saves the selected columns for GOMWU
write.csv(selected_columns_OWA_F11, file = "res_F11_OWAvAM_LFC.csv", quote = FALSE, row.names = F) # saves the selected columns for GOMWU
################################################################
# First, press command-D on mac or ctrl-shift-H in Rstudio and navigate to the directory containing scripts and input files. Then edit, mark and execute the following bits of code, one after another.
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/GOMWU")
# OWvAM:
input=read.csv("res_F0_OWAvAM_LFC.csv") # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="trinotate_annotation_GOblastx_onlyanns_onlyGOs_justmergeGeneIDtab34.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.05,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# OWvAM:
input="res_F0_OWAvAM_LFC.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="trinotate_annotation_GOblastx_onlyanns_onlyGOs_justmergeGeneIDtab34.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.05,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25) # threshold for merging similar (gene-sharing) terms. See README for details.
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.05,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.05,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# OWvAM:
input="res_F0_OWAvAM_LFC.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="trinotate_annotation_GOblastx_onlyanns_onlyGOs_justmergeGeneIDtab34.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
library(topGO)
################################################################
install.packages("topGO")
install.packages("geneLenDataBase")
library(topGO)
library(topGO)
################################################################
install.packages("topGO")
install.packages("Rtools")
# First, press command-D on mac or ctrl-shift-H in Rstudio and navigate to the directory containing scripts and input files. Then edit, mark and execute the following bits of code, one after another.
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/GOMWU")
################################################################
install.packages("topGO")
library(topGO)
################################################################
install.packages("topGO")
ggarrange(F0, F2, F4, F11, nrow = 2, ncol=2)
ggarrange(F0, F2, F4, F11, nrow = 2, ncol=2) +
ggtitle("Generational Gene Expression Changes")
plot <- ggarrange(F0, F2, F4, F11, nrow = 2, ncol=2) +
ggtitle("Generational Gene Expression Changes")
plot
annotate_figure(plot, top = text_grob("Generational Gene Expression",
color = "red", face = "bold", size = 14))
annotate_figure(plot, top = text_grob("Generational Gene Expression",
color = "black", face = "bold", size = 14))
annotate_figure(plot, top = text_grob("Generational Gene Expression",
color = "black", face = "bold", size = 20))
###############################################################
## Check on the DE results from the DESeq command way above
resultsNames(dds)
## Set your working directory
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/")
library(DESeq2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggpubr)
library(wesanderson)
library(vsn)
library(pheatmap)
library(RColorBrewer)
library(eulerr)
# Import the counts matrix
countsTable <- read.table("salmon.isoform.counts.matrix.filteredAssembly", header=TRUE, row.names=1)
###############################################################
## Check on the DE results from the DESeq command way above
resultsNames(dds)
source("~/GitHub/Ecological_Genomics_23/PopGenomics/scripts/Hudsonica DESeq2.R", echo=TRUE)
###############################################################
## Check on the DE results from the DESeq command way above
resultsNames(dds)
resAM_OWA <- results(dds, name="treatment_OWA_vs_AM", alpha=0.05)
## Create a DESeq object and define the experimental design here with the tilda
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData=conds,
design= ~ treatment + generation)
dim(dds)
# Filter out genes with too few reads - remove all genes with counts < 15 in more than 75% of samples, so ~28) suggested by WGCNA on RNAseq FAQ
dds <- dds[rowSums(counts(dds) >= 15) >= 28,]
nrow(dds) # 25260, that have at least 15 reads (aka counts) in 75% of the samples
# Run the DESeq model to test for differential gene expression
dds <- DESeq(dds)
# List the results you've generated
resultsNames(dds)
###############################################################
## Check on the DE results from the DESeq command way above
resultsNames(dds)
resAM_OWA <- results(dds, name="treatment_OWA_vs_AM", alpha=0.05)
resAM_OWA <- resAM_OWA[order(resAM_OWA$padj),]
head(resAM_OWA)
head(resAM_OWA)
### Plot Individual genes ###
# Counts of specific top interaction gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="TRINITY_DN22748_c0_g1::TRINITY_DN22748_c0_g1_i4::g.47585::m.47585", intgroup = (c("treatment","generation")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=treatment, shape=generation)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.2,h=0), size=3)
p <- p + stat_summary(fun = mean, geom = "line")
p <- p + stat_summary(fun = mean, geom = "point", size=5, alpha=0.7)
p
# For OWA vs AM F0
res_F0_OWAvAM <- results(dds_sub_F0, name="treatment_OWA_vs_AM", alpha=0.05)
res_F0_OWAvAM <- res_F0_OWAvAM[order(res_F0_OWAvAM$padj),]
head(res_F0_OWAvAM)
summary(res_F0_OWAvAM)
res_F0_OWAvAM <- res_F0_OWAvAM[!is.na(res_F0_OWAvAM$padj),]
degs_F0_OWAvAM <- row.names(res_F0_OWAvAM[res_F0_OWAvAM$padj < 0.05,])
length(degs_F0_OWAvAM)  # 3918
# For OWA vs AM F4
res_F4_OWAvAM <- results(dds_sub_F4, name="treatment_OWA_vs_AM", alpha=0.05)
res_F4_OWAvAM <- res_F4_OWAvAM[order(res_F4_OWAvAM$padj),]
head(res_F4_OWAvAM)
summary(res_F4_OWAvAM)
res_F4_OWAvAM <- res_F4_OWAvAM[!is.na(res_F4_OWAvAM$padj),]
degs_F4_OWAvAM <- row.names(res_F4_OWAvAM[res_F4_OWAvAM$padj < 0.05,])
length(degs_F4_OWAvAM)  # 241
# For OWA vs AM F11
res_F11_OWAvAM <- results(dds_sub_F11, name="treatment_AM_vs_OWA", alpha=0.05)
res_F11_OWAvAM <- res_F11_OWAvAM[order(res_F11_OWAvAM$padj),]
head(res_F11_OWAvAM)
summary(res_F11_OWAvAM)
res_F11_OWAvAM <- res_F11_OWAvAM[!is.na(res_F11_OWAvAM$padj),]
degs_F11_OWAvAM <- row.names(res_F11_OWAvAM[res_F11_OWAvAM$padj < 0.05,])
length(degs_F11_OWAvAM)  # 1403
# Intersections
length(intersect(degs_F0_OWAvAM,degs_F4_OWAvAM))  # 57
length(intersect(degs_F0_OWAvAM,degs_F11_OWAvAM))  # 226
length(intersect(degs_F11_OWAvAM,degs_F4_OWAvAM))  # 15
intWA <- intersect(degs_F0_OWAvAM,degs_F4_OWAvAM)
length(intersect(degs_F11_OWAvAM,intWA)) # 2
# Note that the names are important and have to be specific to line up the diagram
fit1 <- euler(c("F0" = 3637, "F4" = 171, "F11" = 1164, "F0&F4" = 55, "F0&F11" = 224, "F11&F4" = 13, "F0&F4&F11" = 2))
plot(fit1,  lty = 1:3, quantities = TRUE)
plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 4))
plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 4), title="Shared Genes per Generation Between OWA and AM")
plot(fit1,  lty = 1:3, quantities = TRUE)
plot2 <- plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 4))
annotate_figure(plot2, top = text_grob("Shared Genes per Generation in OWA vs AM",
color = "black", face = "bold", size = 20))
annotate_figure(plot2, top = text_grob("Shared Genes per Generation in OWA vs AM",
color = "black", face = "bold", size = 15))
annotate_figure(plot2, middle = text_grob("Shared Genes per Generation in OWA vs AM",
color = "black", face = "bold", size = 15))
annotate_figure(plot2, mid = text_grob("Shared Genes per Generation in OWA vs AM",
color = "black", face = "bold", size = 15))
annotate_figure(plot2, bottom = text_grob("Shared Genes per Generation in OWA vs AM",
color = "black", face = "bold", size = 15))
annotate_figure(plot2, top = text_grob("Shared Genes per Generation in OWA vs AM",
color = "black", face = "bold", size = 15))
# Perform DESeq2 analysis on the subset
dds_sub_F11 <- DESeq(dds_sub_F11)
resultsNames(dds_sub_F11)
res_F11_OWAvAM <- results(dds_sub_F11, name="treatment_AM_vs_OWA", alpha=0.05)
res_F11_OWAvAM <- res_F11_OWAvAM[order(res_F11_OWAvAM$padj),]
head(res_F11_OWAvAM)
summary(res_F11_OWAvAM)
################################################################
install.packages("topGO")
################################################################
install.packages("topGO")
annotate_figure(plot, top = text_grob("Generational Gene Expression",
color = "black", face = "bold", size = 20))
