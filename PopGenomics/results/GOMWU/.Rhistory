values=wes_palette("Moonrise3")) +
theme_light() +
theme(legend.position=c(0.9,0.855)) +
geom_errorbar(aes(ymin = protein - all_histone_sd, ymax = protein + all_histone_sd), width = 0.2)  # Vertical error bars
ggplot(all_histone_protein, aes(x=dose, y=protein)) +
geom_bar(stat = "summary",  width = 1.5, aes(fill=histone),
position = "dodge", fun="mean",
show.legend = T) +
xlab('Dosage(ug/ul)') +
ylab('Histone Protein Amount') +
scale_fill_manual((name="Histone"),
labels=c("H3K27ac","H3K27me3","H3K4me3"),
values=wes_palette("Moonrise3")) +
theme_light() +
theme(legend.position=c(0.9,0.855))
all_protein_plot <- ggplot(all_histone_protein, aes(x=dose, y=protein)) +
geom_bar(stat = "summary",  width = 1.5, aes(fill=histone),
position = "dodge", fun="mean",
show.legend = T) +
xlab('Dosage(ug/ul)') +
ylab('Histone Protein Amount') +
scale_fill_manual((name="Histone"),
labels=c("H3K27ac","H3K27me3","H3K4me3"),
values=wes_palette("Moonrise3")) +
theme_light() +
theme(legend.position=c(0.9,0.855))
all_protein_plot
all_protein_plot <- all_protein_plot + stat_summary(
fun.data = "mean_cl_normal",  # Use "mean_cl_normal" for SD bars
geom = "errorbar",  # Use error bars
width = 0.2  # Adjust the width of error bars as needed
)
all_protein_plot <- all_protein_plot + stat_summary(fun.data = "mean_cl_normal",  geom = "errorbar", width = 0.2)
all_protein_plot <- all_protein_plot + stat_summary(fun.all_histone_protein = "mean_cl_normal",  geom = "errorbar", width = 0.2)
all_protein_plot <- ggplot(all_histone_protein, aes(x=dose, y=protein)) +
geom_bar(stat = "mean",  width = 1.5, aes(fill=histone),
position = "dodge", fun="mean",
show.legend = T) +
xlab('Dosage(ug/ul)') +
ylab('Histone Protein Amount') +
scale_fill_manual((name="Histone"),
labels=c("H3K27ac","H3K27me3","H3K4me3"),
values=wes_palette("Moonrise3")) +
theme_light() +
theme(legend.position=c(0.9,0.855))
all_protein_plot <- ggplot(all_histone_protein, aes(x=dose, y=protein)) +
geom_bar(stat = "identity",  width = 1.5, aes(fill=histone),
position = "dodge", fun="mean",
show.legend = T) +
xlab('Dosage(ug/ul)') +
ylab('Histone Protein Amount') +
scale_fill_manual((name="Histone"),
labels=c("H3K27ac","H3K27me3","H3K4me3"),
values=wes_palette("Moonrise3")) +
theme_light() +
theme(legend.position=c(0.9,0.855))
all_protein_plot
all_protein_plot <- ggplot(all_histone_protein, aes(x=dose, y=protein)) +
geom_bar(stat = "identity",  width = 1.5, aes(fill=histone),
position = "dodge", fun="mean",
show.legend = T) +
xlab('Dosage(ug/ul)') +
ylab('Histone Protein Amount') +
scale_fill_manual((name="Histone"),
labels=c("H3K27ac","H3K27me3","H3K4me3"),
values=wes_palette("Moonrise3")) +
theme_light() +
theme(legend.position=c(0.9,0.855))
ggplot(all_histone_protein, aes(x=dose, y=protein)) +
geom_bar(stat = "identity",  width = 1.5, aes(fill=histone),
position = "dodge", fun="mean",
show.legend = T) +
xlab('Dosage(ug/ul)') +
ylab('Histone Protein Amount') +
scale_fill_manual((name="Histone"),
labels=c("H3K27ac","H3K27me3","H3K4me3"),
values=wes_palette("Moonrise3")) +
theme_light() +
theme(legend.position=c(0.9,0.855))
source("C:/Users/bjork/Downloads/histone_coding.R", echo=TRUE)
################################################################
install.packages("topGO")
install.packages("BiocManager")
BiocManager::install("GO.db")
BiocManager::install("topGO.db")
library(topGO)
BiocManager::install("topGO")
library(topGO)
install.packages("geneLenDataBase")
library(geneLenDataBase)
source("~/GitHub/Ecological_Genomics_23/PopGenomics/scripts/Hudsonica DESeq2.R", echo=TRUE)
### Plot Individual genes ###
# Counts of specific top interaction gene! (important validatition that the normalization, model is working)
d <-plotCounts(dds, gene="TRINITY_DN22748_c0_g1::TRINITY_DN22748_c0_g1_i4::g.47585::m.47585", intgroup = (c("treatment","generation")), returnData=TRUE)
d
p <-ggplot(d, aes(x=treatment, y=count, color=treatment, shape=generation)) +
theme_minimal() + theme(text = element_text(size=20), panel.grid.major=element_line(colour="grey"))
p <- p + geom_point(position=position_jitter(w=0.2,h=0), size=3)
p <- p + stat_summary(fun = mean, geom = "line")
p <- p + stat_summary(fun = mean, geom = "point", size=5, alpha=0.7)
p
####################
# MODEL NUMBER 2 - subset to focus on effect of generation
dds <- DESeqDataSetFromMatrix(countData = countsTableRound, colData=conds,
design= ~ treatment)
dim(dds)
# Filter
dds <- dds[rowSums(counts(dds) >= 15) >= 28,]
nrow(dds)
# Subset the DESeqDataSet to F0 generation
dds_sub_F0 <- subset(dds, select = generation == 'F0')
dim(dds_sub_F0)
# Perform DESeq2 analysis on the subset
dds_sub_F0 <- DESeq(dds_sub_F0)
resultsNames(dds_sub_F0)
res_F0_OWAvAM <- results(dds_sub_F0, name="treatment_OWA_vs_AM", alpha=0.05)
res_F0_OWAvAM <- res_F0_OWAvAM[order(res_F0_OWAvAM$padj),]
head(res_F0_OWAvAM)
summary(res_F0_OWAvAM)
library(topGO)
library(geneLenDataBase)
install.packages("geneLenDataBase")
BiocManager::install("geneLenDataBase")
library(geneLenDataBase)
# First, press command-D on mac or ctrl-shift-H in Rstudio and navigate to the directory containing scripts and input files. Then edit, mark and execute the following bits of code, one after another.
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/GOMWU")
# OWvAM:
input="res_F0_OWAvAM_LFC.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="trinotate_annotation_GOblastx_onlyanns_onlyGOs_justmergeGeneIDtab34.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.05,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
quartz()
library(quarts)
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.0005, # FDR cutoff to print in regular (not italic) font.
level3=0.0001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
library(ape)
install.packages("ape")
library(ape)
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.0005, # FDR cutoff to print in regular (not italic) font.
level3=0.0001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
#	colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
png(filename = "dendroGOMWU_BP_lesssig_OAvAM_LFC.png", width = 800, height = 1400, res = 200)
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.0005, # FDR cutoff to print in regular (not italic) font.
level3=0.0001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c(wes_palette("GrandBudapest1")) # these are default colors, un-remar and change if needed
)
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.0005, # FDR cutoff to print in regular (not italic) font.
level3=0.0001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
#	level1=0.001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
#level2=0.0005, # FDR cutoff to print in regular (not italic) font.
level3=0.0001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.0000001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.0005, # FDR cutoff to print in regular (not italic) font.
level3=0.0001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.0005, # FDR cutoff to print in regular (not italic) font.
level3=0.0001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# text representation of results, with actual adjusted p-values
results[[1]]
pcut=1e-2 # adjusted pvalue cutoff for representative GO
hcut=0.9 # height at which cut the GO terms tree to get "independent groups".
# plotting the GO tree with the cut level (un-remark the next two lines to plot)
plot(results[[2]],cex=0.6)
abline(h=hcut,col="red")
# plotting the GO tree with the cut level (un-remark the next two lines to plot)
plot(results[[2]],cex=0.6)
abline(h=hcut,col="red")
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.0005, # FDR cutoff to print in regular (not italic) font.
level3=0.0001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c("dodgerblue2","firebrick1","skyblue2","lightcoral") # these are default colors, un-remar and change if needed
)
# results above
dev.off()
# text representation of results, with actual adjusted p-values
results[[1]]
pcut=1e-2 # adjusted pvalue cutoff for representative GO
hcut=0.9 # height at which cut the GO terms tree to get "independent groups".
# plotting the GO tree with the cut level (un-remark the next two lines to plot)
plot(results[[2]],cex=0.6)
abline(h=hcut,col="red")
# cutting
ct=cutree(results[[2]],h=hcut)
annots=c();ci=1
for (ci in unique(ct)) {
message(ci)
rn=names(ct)[ct==ci]
obs=grep("obsolete",rn)
if(length(obs)>0) { rn=rn[-obs] }
if (length(rn)==0) {next}
rr=results[[1]][rn,]
bestrr=rr[which(rr$pval==min(rr$pval)),]
best=1
if(nrow(bestrr)>1) {
nns=sub(" .+","",row.names(bestrr))
fr=c()
for (i in 1:length(nns)) { fr=c(fr,eval(parse(text=nns[i]))) }
best=which(fr==max(fr))
}
if (bestrr$pval[best]<=pcut) { annots=c(annots,sub("\\d+\\/\\d+ ","",row.names(bestrr)[best]))}
}
mwus=read.table(paste("MWU",goDivision,input,sep="_"),header=T)
bestGOs=mwus[mwus$name %in% annots,]
bestGOs
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.0005, # FDR cutoff to print in regular (not italic) font.
level3=0.0001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c(wes_palette("GrandBudapest1")) # these are default colors, un-remar and change if needed
)
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.0005, # FDR cutoff to print in regular (not italic) font.
level3=0.0001, # FDR cutoff to print in large bold font.
txtsize=0.5,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c(wes_palette("GrandBudapest1")) # these are default colors, un-remar and change if needed
)
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.05, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.01, # FDR cutoff to print in regular (not italic) font.
level3=0.001, # FDR cutoff to print in large bold font.
txtsize=0.5,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c(wes_palette("GrandBudapest1")) # these are default colors, un-remar and change if needed
)
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.0001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.00005, # FDR cutoff to print in regular (not italic) font.
level3=0.00001, # FDR cutoff to print in large bold font.
txtsize=0.5,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c(wes_palette("GrandBudapest1")) # these are default colors, un-remar and change if needed
)
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.0001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.00005, # FDR cutoff to print in regular (not italic) font.
level3=0.00001, # FDR cutoff to print in large bold font.
txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c(wes_palette("GrandBudapest1")) # these are default colors, un-remar and change if needed
)
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.0001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.00005, # FDR cutoff to print in regular (not italic) font.
level3=0.00001, # FDR cutoff to print in large bold font.
txtsize=1.0,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.5, # height of the hierarchical clustering tree
colors=c(wes_palette("GrandBudapest1")) # these are default colors, un-remar and change if needed
)
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.0001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.00005, # FDR cutoff to print in regular (not italic) font.
level3=0.00001, # FDR cutoff to print in large bold font.
txtsize=1.0,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=0.7, # height of the hierarchical clustering tree
colors=c(wes_palette("GrandBudapest1")) # these are default colors, un-remar and change if needed
)
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.0001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.00005, # FDR cutoff to print in regular (not italic) font.
level3=0.00001, # FDR cutoff to print in large bold font.
txtsize=1.0,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=1.0, # height of the hierarchical clustering tree
colors=c(wes_palette("GrandBudapest1")) # these are default colors, un-remar and change if needed
)
png(filename = "dendroGOMWU_BP_lesssig_OAvAM_LFC.png", width = 800, height = 1400, res = 200)
# OWvAM:
input="res_F4_OWAvAM_LFC.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="trinotate_annotation_GOblastx_onlyanns_onlyGOs_justmergeGeneIDtab34.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.05,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.0001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.00005, # FDR cutoff to print in regular (not italic) font.
level3=0.00001, # FDR cutoff to print in large bold font.
txtsize=1.0,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=1.0, # height of the hierarchical clustering tree
colors=c(wes_palette("GrandBudapest1")) # these are default colors, un-remar and change if needed
)
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.0001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.00005, # FDR cutoff to print in regular (not italic) font.
level3=0.00001, # FDR cutoff to print in large bold font.
txtsize=1.0,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=1.0, # height of the hierarchical clustering tree
colors=c(wes_palette("GrandBudapest1")) # these are default colors, un-remar and change if needed
)
png(filename = "dendroGOMWU_BP_lesssig_F4_OAvAM_LFC.png", width = 800, height = 1400, res = 200)
# results above
dev.off()
# text representation of results, with actual adjusted p-values
results[[1]]
pcut=1e-2 # adjusted pvalue cutoff for representative GO
hcut=0.9 # height at which cut the GO terms tree to get "independent groups".
# plotting the GO tree with the cut level (un-remark the next two lines to plot)
plot(results[[2]],cex=0.6)
abline(h=hcut,col="red")
# cutting
ct=cutree(results[[2]],h=hcut)
annots=c();ci=1
for (ci in unique(ct)) {
message(ci)
rn=names(ct)[ct==ci]
obs=grep("obsolete",rn)
if(length(obs)>0) { rn=rn[-obs] }
if (length(rn)==0) {next}
rr=results[[1]][rn,]
bestrr=rr[which(rr$pval==min(rr$pval)),]
best=1
if(nrow(bestrr)>1) {
nns=sub(" .+","",row.names(bestrr))
fr=c()
for (i in 1:length(nns)) { fr=c(fr,eval(parse(text=nns[i]))) }
best=which(fr==max(fr))
}
if (bestrr$pval[best]<=pcut) { annots=c(annots,sub("\\d+\\/\\d+ ","",row.names(bestrr)[best]))}
}
mwus=read.table(paste("MWU",goDivision,input,sep="_"),header=T)
bestGOs=mwus[mwus$name %in% annots,]
bestGOs
# Can run for each of 3 inputs, and can do for each GO division BP, MF, CC
# OWvAM:
input="res_F11_OWAvAM_LFC.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="trinotate_annotation_GOblastx_onlyanns_onlyGOs_justmergeGeneIDtab34.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
# ------------- Calculating stats
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.05,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# ----------- Plotting results
results=gomwuPlot(input,goAnnotations,goDivision,
# absValue=-log(0.05,10),  # genes with the measure value exceeding this will be counted as "good genes". This setting is for signed log-pvalues. Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").
absValue=1, # un-remark this if you are using log2-fold changes
level1=0.0001, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.
level2=0.00005, # FDR cutoff to print in regular (not italic) font.
level3=0.00001, # FDR cutoff to print in large bold font.
txtsize=1.0,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect
treeHeight=1.0, # height of the hierarchical clustering tree
colors=c(wes_palette("GrandBudapest1")) # these are default colors, un-remar and change if needed
)
png(filename = "dendroGOMWU_BP_lesssig_F11_OAvAM_LFC.png", width = 800, height = 1400, res = 200)
# results above
dev.off()
# text representation of results, with actual adjusted p-values
results[[1]]
pcut=1e-2 # adjusted pvalue cutoff for representative GO
hcut=0.9 # height at which cut the GO terms tree to get "independent groups".
# plotting the GO tree with the cut level (un-remark the next two lines to plot)
plot(results[[2]],cex=0.6)
abline(h=hcut,col="red")
# cutting
ct=cutree(results[[2]],h=hcut)
annots=c();ci=1
for (ci in unique(ct)) {
message(ci)
rn=names(ct)[ct==ci]
obs=grep("obsolete",rn)
if(length(obs)>0) { rn=rn[-obs] }
if (length(rn)==0) {next}
rr=results[[1]][rn,]
bestrr=rr[which(rr$pval==min(rr$pval)),]
best=1
if(nrow(bestrr)>1) {
nns=sub(" .+","",row.names(bestrr))
fr=c()
for (i in 1:length(nns)) { fr=c(fr,eval(parse(text=nns[i]))) }
best=which(fr==max(fr))
}
if (bestrr$pval[best]<=pcut) { annots=c(annots,sub("\\d+\\/\\d+ ","",row.names(bestrr)[best]))}
}
mwus=read.table(paste("MWU",goDivision,input,sep="_"),header=T)
bestGOs=mwus[mwus$name %in% annots,]
bestGOs
# Can run for each of 3 inputs, and can do for each GO division BP, MF, CC
# Replaced values with respective files for F0, F4, and F11
input="res_F0_OWAvAM_LFC.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="trinotate_annotation_GOblastx_onlyanns_onlyGOs_justmergeGeneIDtab34.txt" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
# ------------- Calculating stats
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.05,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=10,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25 # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
