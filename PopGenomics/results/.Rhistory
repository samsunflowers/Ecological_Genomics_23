title: "Dosing Data"
{r, include=FALSE}
read.csv("Thesis Plan")
read.csv("Thesis Plan.csv")
read.csv("Thesis Plan - Dosing Data.csv")
read.csv("Thesis_Plan_-_Dosing_Data.csv")
----
title: "Bjorklung_Dosing_Data"
----
#title: "Bjorklun_Dosing_Data"
#output: html_document
----
## Setting things up
```{r, include=FALSE}
----
#title: "Bjorklun_Dosing_Data"
#output: html_document
----
## Setting things up
```{r}
knitr::opts_chunk$set(echo = TRUE)
----
#title: "Bjorklun_Dosing_Data"
#output: html_document
----
## Setting things up
```{r}
library(lubridate)
library(ecotox)
install.packages("ecotox")
## Calculate LC50 and LC99
head(dosing)
data <- read.csv('C:/Users/bjork/Downloads/dosing.csv')
install.packages("ecotox")
## Calculate LC50 and LC99
head(dosing)
## Calculate LC50 and LC99
head(dosing)
## Calculate LC50 and LC99
head(dosing.csv)
read(dosing.csv)
print(dosing.csv)
install.packages("tidyverse")
install.packages("tidyverse")
search()
#install.packages("tidyverse")
library(readr)
library(ggplot2)
path <- "C:/Users/bjork/Downloads/dosing.csv"
content <- read.csv(path)
print (content)
path$position <- NULL
print (content)
Data$position <- NULL
path[1] <- list(NULL)
print (path)
content[1] <- list(NULL)
print (path)
print (content)
content[2] <- list(NULL)
print (content)
path <- "C:/Users/bjork/Downloads/dosing.csv"
content <- read.csv(path)
print (content)
content[2] <- list(NULL)
print (content)
content[2:3] <- list(NULL)
print (content)
content[2] <- list(NULL)
print (content)
path <- "C:/Users/bjork/Downloads/dosing.csv"
content <- read.csv(path)
content[0:2] <- list(NULL)
print (content)
content[2:3] <- list(NULL)
print (content)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
#install.packages("tidyverse")
#library(readr)
#library(ggplot2)
library(ecotox)
#install.packages("tidyverse")
#library(readr)
#library(ggplot2)
library("ecotox")
### Libraries needed for analysis
```{r}"
library(tidyverse)
library(cowplot)
library(readxl)
library(writexl)
data <- read.csv("C:/Users/bjork/Downloads/dosing.csv")
names(data) <- c("dosage","position", "well", "survival")
data[5] <- list(NULL)
# Calculate "average survival" by averaging 1s (alive) and 0s (dead) at different dosages
lc_averages <- data %>%
mutate(dosage = factor(dosage)) %>%
group_by(dosage) %>%
summarize(mean_survival = mean(survival))
ggplot(lc_averages, aes(x = dosage, y = mean_survival)) +
geom_bar(stat = "identity",
position = position_dodge(),
show.legend = F,
fill = "pink",
color = "black") +
geom_text(aes(label = paste(format(round(mean_survival*100,
digits = 2),
nsmall =2),
"%"),
vjust = -0.6,
hjust = 0.5,
size = 3),
show.legend = F) +
theme_set(theme_cowplot(12)) +
labs(x = "Dosage (ppm)", y = "Average 48-hr survival (% alive)") +
theme(panel.border = element_rect(colour = "black", fill=NA, size=1)) +
theme(axis.title = element_text(size = 15)) +
theme(axis.text = element_text(size = 15)) +
theme(axis.ticks.x = element_blank())
dev.off()
# Run probit analysis (logistic regression with probit link function) using glm()
probit <- glm(survival ~ dosage,
data = data,
family = binomial(link = "probit"))
# Get coefficients of probit function
summary(probit)
# Define a function to extract the lc25 value (dosage at which 75% of individuals survive on average)
findInt <- function(model, value) {
function(x) {
predict(model, data.frame(dosage=x),
type="response") - value
}
}
# Extract lc25 value
uniroot(findInt(probit, .75),
range(data$dosage))$root
<b>Summary results</b>:
ggplot(data, aes(x = dosage, y = survival)) +
geom_point(position = position_jitter(height = 0.05),
show.legend = F,
size = 4,
color = "black",
fill = "grey",
pch=21) +
geom_smooth(method="glm",
method.args = list(family = "binomial"),
show.legend = F,
color = "black",
fullrange = T) +
theme_set(theme_cowplot(12)) +
geom_hline(yintercept = 0.75,
color = "blue",
linetype = "longdash",
size = 1) +
geom_vline(xintercept = 14.5,
color = "blue",
linetype = "longdash",
size = 1) +
scale_x_continuous(expand = c(0,0)) +
labs(x = "Dosage (ppm)", y = "Survival probability") +
theme(panel.border = element_rect(colour = "black", fill=NA, size=1)) +
theme(axis.title = element_text(size = 15)) +
theme(axis.text = element_text(size = 15)) +
theme(axis.ticks.x = element_blank())
list.files() # list out the files in this folder to make sure you're in the right spot.
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/") # set your path to your results folder in your repo where you saved your diversity stats file
list.files() # list out the files in this folder to make sure you're in the right spot.
# First let's read in the diversity stats
theta <- read.table("2100_.thetas",sep="\t",header=T)
list.files() # list out the files in this folder to make sure you're in the right spot.
# First let's read in the diversity stats
theta <- read.table("2100_.thetas",sep="\t",header=T)
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/") # set your path to your results folder in your repo where you saved your diversity stats file
list.files() # list out the files in this folder to make sure you're in the right spot.
# First let's read in the diversity stats
theta <- read.table("2100_.thetas",sep="\t",header=T)
head(theta)
view(theta)
view(theta)
view (theta)
# First let's read in the diversity stats
theta <- read.table("2100_.thetas",sep="\t",header=T)
view(theta)
head(theta)
View(theta)
theta$tWsite = theta$tW/theta$nSites #scales the theta-W by the number of sites
theta$tPsite = theta$tP/theta$nSites #scales the theta-Pi by the number of sites
summary(theta)
head(theta[order(theta$Tajima, decreasing = TRUE),]) # top 10 Tajima's D values
head(theta[order(theta$Tajima, decreasing = FALSE),]) # bottom 10 Tajima's D values
sfs<-scan('2100_.sfs')
sfs<-sfs[-c(1,which(sfs==0))]
sfs<-sfs/sum(sfs)
# Be sure to replace "9999" with your pop code in the "main" legend below
barplot(sfs,xlab="Chromosomes",
names=1:length(sfs),
ylab="Proportions",
main="Pop 2100 Site Frequency Spectrum",
col='blue')
# Put the nucleotide diversities, Tajima's D, and SFS into a 4-panel figure
par(mfrow=c(2,2))
hist(theta$tWsite, xlab="theta-W", main="Watterson's theta")
hist(theta$tPsite, xlab="theta-Pi", main="Pairwise Nucleotide Diversity")
barplot(sfs,names=1:length(sfs),main='Site Frequency Spectrum')
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/") # set your path to your results folder in your repo where you saved your diversity stats file
list.files() # list out the files in this folder to make sure you're in the right spot.
# First let's read in the diversity stats
theta <- read.table("2100_.thetas",sep="\t",header=T)
head(theta)
summary(theta)
head(theta)
theta$tWsite = theta$tW/theta$nSites #scales the theta-W by the number of sites
theta$tPsite = theta$tP/theta$nSites #scales the theta-Pi by the number of sites
summary(theta)
head(theta[order(theta$Tajima, decreasing = TRUE),]) # top 10 Tajima's D values
head(theta[order(theta$Tajima, decreasing = FALSE),]) # bottom 10 Tajima's D values
sfs<-scan('2100_.sfs')
sfs<-sfs[-c(1,which(sfs==0))]
sfs<-sfs/sum(sfs)
# Be sure to replace "9999" with your pop code in the "main" legend below
barplot(sfs,xlab="Chromosomes",
names=1:length(sfs),
ylab="Proportions",
main="Pop 2100 Site Frequency Spectrum",
col='blue')
hist(theta$Tajima, xlab="D", main="Tajima's D")
barplot(sfs,names=1:length(sfs),main='Site Frequency Spectrum')
