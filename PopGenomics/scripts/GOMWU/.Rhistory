tonsago<- subset(allgos, select = species == 'tonsa')
tonsago <- (allgos[allgos$species %in% "tonsa", ])
hudsonicago <- (allgos[allgos$species %in% "hudsonica", ])
ggplot(data = tonsago, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis all")
ggplot(data = tonsago, aes(x = generation, y = X,
color = `pval`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis A. tonsa")
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results")
allgos <- read.csv("shared_go.csv")
tonsago <- (allgos[allgos$species %in% "tonsa", ])
hudsonicago <- (allgos[allgos$species %in% "hudsonica", ])
# plot: dot plot
ggplot(data = allgos, aes(x = generation, y = X,
color = `p.adj`, size = gene.ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis all")
colnames(allgos) <- c("Go Category", "Species", "Generation", "Pval", "Gene Ratio", "Gene Number", "Gene Total", "-Log10(P-value")
colnames(allgos) <- c("Go Category", "Species", "Generation", "Pval", "Gene Ratio", "Gene Number", "Gene Total", "-Log10(P-value)")
# plot: dot plot
ggplot(data = allgos, aes(x = Generation, y = Go Category,
# plot: dot plot
ggplot(data = allgos, aes(x = Generation, y = Go_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis all")
colnames(allgos) <- c("GOCategory", "Species", "Generation", "Pval", "Gene Ratio", "Gene Number", "Gene Total", "-Log10(P-value)")
colnames(allgos) <- c("GO_Category", "Species", "Generation", "Pval", "Gene_Ratio", "Gene Number", "Gene Total", "-Log10(P-value)")
# plot: dot plot
ggplot(data = allgos, aes(x = Generation, y = Go_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis all")
# plot: dot plot
ggplot(data = allgos, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO enrichment analysis all")
# plot: dot plot
ggplot(data = allgos, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis All")
ggplot(data = tonsago, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis A. tonsa")
View(allgos)
tonsago <- (allgos[allgos$species %in% "tonsa", ])
hudsonicago <- (allgos[allgos$species %in% "hudsonica", ])
hudsonicago <- (allgos[allgos$Species %in% "hudsonica", ])
tonsago <- (allgos[allgos$Species %in% "tonsa", ])
ggplot(data = tonsago, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis A. tonsa")
ggplot(data = hudsonicago, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis A. hudsonica")
ggplot(data = hudsonicago, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis A. hudsonica")
# plot: dot plot
ggplot(data = allgos, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis All")
allhudsgo <- read.csv("Shared_HudsonicaGO.csv")
colnames(allhudsgo) <- c("GO_Category", "Species", "Generation", "Pval", "Gene_Ratio", "Gene Number", "Gene Total", "-Log10(P-value)")
# plot: dot plot
ggplot(data = allhudsgo, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis Huds")
# plot: dot plot
ggplot(data = allhudsgo, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis A. hudsonica")
top5hudsgo <- read.csv("Top_5_HudsGo.csv")
# plot: dot plot
ggplot(data = top5hudsgo, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis A. hudsonica")
colnames(top5hudsgo) <- c("GO_Category", "Species", "Generation", "Pval", "Gene_Ratio", "Gene Number", "Gene Total", "-Log10(P-value)")
# plot: dot plot
ggplot(data = top5hudsgo, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis A. hudsonica")
allgos <- read.csv("shared_go.csv")
allhudsgo <- read.csv("Shared_HudsonicaGO.csv")
top5hudsgo <- read.csv("Top_5_HudsGo.csv")
colnames(allgos) <- c("GO_Category", "Species", "Generation", "Pval", "Gene_Ratio", "Gene Number", "Gene Total", "-Log10(P-value)")
colnames(allhudsgo) <- c("GO_Category", "Species", "Generation", "Pval", "Gene_Ratio", "Gene Number", "Gene Total", "-Log10(P-value)")
colnames(top5hudsgo) <- c("GO_Category", "Species", "Generation", "Pval", "Gene_Ratio", "Gene Number", "Gene Total", "-Log10(P-value)")
tonsago <- (allgos[allgos$Species %in% "tonsa", ])
hudsonicago <- (allgos[allgos$Species %in% "hudsonica", ])
# plot: dot plot
ggplot(data = top5hudsgo, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis A. hudsonica")
ggplot(data = allhudsgo, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis A. hudsonica")
ggplot(data = tonsago, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis A. tonsa")
ggplot(data = hudsonicago, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis A. hudsonica")
tonsago <- (allgos[allgos$Species %in% "tonsa", ])
ggplot(data = tonsago, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis A. tonsa")
tonsgo <- read.csv("tonsa_go.csv")
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results")
tonsgo <- read.csv("tonsa_go.csv")
tonsgo <- read.csv("tonsa_gos.csv")
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results")
tonsgo <- read.csv("tonsa_gos.csv")
allgos <- read.csv("shared_go.csv")
allhudsgo <- read.csv("Shared_HudsonicaGO.csv")
top5hudsgo <- read.csv("Top_5_HudsGo.csv")
tonsgo <- read.csv("tonsa_gos.csv")
tonsgo <- read.csv("Tonsa_GO.csv")
tonsgo <- read.csv("Tonsa_GO.csv")
tonsgo <- read.csv("Tonsa_GO.csv")
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results")
tonsgo <- read.csv("Tonsa_GO.csv")
colnames(tonsgo) <- c("GO_Category", "Species", "Generation", "Pval", "Gene_Ratio", "Gene Number", "Gene Total", "-Log10(P-value)")
ggplot(data = tonsgo, aes(x = Generation, y = GO_Category,
color = `-Log10(P-value)`, size = Gene_Ratio)) +
geom_point() +
scale_color_gradient(low = "#FD6467", high = "#5B1A18") +
theme_bw() +
ylab("") +
xlab("") +
ggtitle("GO Enrichment Analysis A. tonsa")
# TONSA F1
input="res_Tonsa_F1_HHHHvsAAAA_LFC.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="dge_F1_GOterms.corrected.out" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
# Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
# Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
################################################################
# First, press command-D on mac or ctrl-shift-H in Rstudio and navigate to the directory containing scripts and input files. Then edit, mark and execute the following bits of code, one after another.
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/scripts/GOMWU")
# TONSA F1
input="res_Tonsa_F1_HHHHvsAAAA_LFC.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="dge_F1_GOterms.corrected.out" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
# Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
# Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
# Note that the names are important and have to be specific to line up the diagram
fit1 <- euler(c("F0" = 1193, "F4" = 453, "F0&F4" = 73))
plot(fit1,  lty = 1:3, quantities = TRUE)
library(eulerr)
# Note that the names are important and have to be specific to line up the diagram
fit1 <- euler(c("F0" = 1193, "F4" = 453, "F0&F4" = 73))
plot(fit1,  lty = 1:3, quantities = TRUE)
plot2 <- plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 14))
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 12))
library(wesanderson)
brary(wesanderson)
library(wesanderson)
library(vsn)
library(pheatmap)
library(RColorBrewer)
library(eulerr)
# Note that the names are important and have to be specific to line up the diagram
fit1 <- euler(c("F0" = 1193, "F4" = 453, "F0&F4" = 73))
plot(fit1,  lty = 1:3, quantities = TRUE)
plot2 <- plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 14))
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 20))
library(dplyr)
# Note that the names are important and have to be specific to line up the diagram
fit1 <- euler(c("F0" = 1193, "F4" = 453, "F0&F4" = 73))
plot(fit1,  lty = 1:3, quantities = TRUE)
plot2 <- plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 14))
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 20))
library(DESeq2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggpubr)
library(wesanderson)
library(vsn)
library(pheatmap)
library(RColorBrewer)
library(eulerr)
# Note that the names are important and have to be specific to line up the diagram
fit1 <- euler(c("F0" = 1193, "F4" = 453, "F0&F4" = 73))
plot(fit1,  lty = 1:3, quantities = TRUE)
plot2 <- plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 14))
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 20))
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 25))
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 12))
plot2 <- plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 25))
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 12))
# Note that the names are important and have to be specific to line up the diagram
fit1 <- euler(c("F0" = 1193, "F4" = 453, "F0&F4" = 73), size=15)
plot(fit1,  lty = 1:3, quantities = TRUE)
plot2 <- plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 25))
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 12))
# Note that the names are important and have to be specific to line up the diagram
fit1 <- euler(c("F0" = 1193, "F4" = 453, "F0&F4" = 73), size=25)
plot(fit1,  lty = 1:3, quantities = TRUE)
plot2 <- plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 25))
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 12))
plot(fit1,  lty = 1:3, quantities = TRUE, size=25)
plot2 <- plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 25))
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 12))
plot2 <- plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 25), size = 25)
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 12))
plot2 <- plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 25),
quantities = list(cex = .5))
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 12))
plot(fit1,  lty = 1:3, quantities = list(cex = .5))
plot(fit1,  lty = 1:3, quantities = list(cex = 5))
plot(fit1,  lty = 1:3, quantities = list(cex = 2))
plot2 <- plot(fit1, quantities = TRUE, fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 25))
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 12))
plot2 <- plot(fit1, quantities = list(cex=2), fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 25))
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 12))
# Revist the Hudsonica data
ddsHudsonica <- DESeqDataSetFromMatrix(countData = countsTableRoundTonsa, colData=condsTonsa,
design= ~ treatment)
## Set your working directory; change to your working directory!
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/results/")
library(DESeq2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(ggpubr)
library(wesanderson)
library(vsn)
library(pheatmap)
library(RColorBrewer)
library(eulerr)
# Import the counts matrix for Hudsonica
countsTableHudsonica <- read.table("salmon.isoform.counts.matrix.filteredAssembly", header=TRUE, row.names=1)
head(countsTableHudsonica)
# Import the counts matrix for Tonsa
countsTableTonsaF1 <- read.table("DE_counts_F1.txt", header=TRUE, row.names=1)
head(countsTableTonsaF1)
countsTableTonsaF3 <- read.table("DE_counts_F3.txt", header=TRUE, row.names=1)
head(countsTableTonsaF3)
# Round the counts matrix for Hudsonica because DESeq2 does not like decimals
countsTableRoundHudsonica <- round(countsTableHudsonica)
head(countsTableRoundHudsonica)
# Round the counts matrix for Tonsa because DESeq2 does not like decimals
countsTableRoundTonsaF1 <- round(countsTableTonsaF1)
head(countsTableRoundTonsaF1)
countsTableRoundTonsaF3 <- round(countsTableTonsaF3)
head(countsTableRoundTonsaF3)
# Combining Tonsa F1 and F3 rounded counts data
common_row_names <- intersect(row.names(countsTableRoundTonsaF1), row.names(countsTableRoundTonsaF3))
countsTableRoundTonsaF1_common <- countsTableRoundTonsaF1[common_row_names, ]
countsTableRoundTonsaF3_common <- countsTableRoundTonsaF3[common_row_names, ]
countsTableRoundTonsa <- cbind(countsTableRoundTonsaF1_common, countsTableRoundTonsaF3_common)
head(countsTableRoundTonsa)
# Import the sample description table for Hudsonica and Tonsa
condsHudsonica <- read.delim("ahud_samples_R.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1)
head(condsHudsonica)
condsTonsaF1 <- read.delim("RT_tonsa_F1_samples.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1)
condsTonsaF3 <- read.delim("RT_tonsa_F3_samples.txt", header=TRUE, stringsAsFactors = TRUE, row.names=1)
# Add a column that states the generation for each Tonsa dataset to make it easier to subset later
condsTonsaF1$generation <- c("F1")
condsTonsaF3$generation <- c("F3")
# Combine the condition data for F1 and F3 Tonsa data
condsTonsa <- rbind(condsTonsaF1, condsTonsaF3)
colnames(condsTonsa) <- c("treatment", "line", "environment", "generation")
head(condsTonsa)
# How many reads do we have in Hudsonica?
colSums(countsTableRoundHudsonica)
mean(colSums(countsTableRoundHudsonica))
barplot(colSums(countsTableRoundHudsonica), names.arg=colnames(countsTableRoundHudsonica),cex.names=0.5, las=3,ylim=c(0,20000000))
abline(h=mean(colSums(countsTableRoundHudsonica)), col="blue", lwd=2)
# How many reads do we have in Tonsa?
colSums(countsTableRoundTonsa)
mean(colSums(countsTableRoundTonsa))
barplot(colSums(countsTableRoundTonsa), names.arg=colnames(countsTableRoundTonsa),cex.names=0.5, las=3,ylim=c(0,20000000))
abline(h=mean(colSums(countsTableRoundTonsa)), col="blue", lwd=2)
# What is the average number of counts per gene in Hudsonica?
rowSums(countsTableRoundHudsonica)
mean(rowSums(countsTableRoundHudsonica)) # 8217.81
median(rowSums(countsTableRoundHudsonica)) # 377
apply(countsTableRoundHudsonica,2,mean) # 2 in the apply function does the action across columns
apply(countsTableRoundHudsonica,1,mean) # 1 in the apply function does the action across rows
hist(apply(countsTableRoundHudsonica,1,mean),xlim=c(0,10000), ylim=c(0,60000),breaks=1000)
# What is the average number of counts per gene in Tonsa?
rowSums(countsTableRoundTonsa)
mean(rowSums(countsTableRoundTonsa)) # 24131.74
median(rowSums(countsTableRoundTonsa)) # 4776
apply(countsTableRoundTonsa,2,mean) # 2 in the apply function does the action across columns
apply(countsTableRoundTonsa,1,mean) # 1 in the apply function does the action across rows
hist(apply(countsTableRoundTonsa,1,mean),xlim=c(0,10000), ylim=c(0,60000),breaks=1000)
# Create a DESeq object and define the experimental design here with the tilda
# HUDSONICA
ddsHudsonica <- DESeqDataSetFromMatrix(countData = countsTableRoundHudsonica, colData=condsHudsonica,
design= ~ treatment + generation)
dim(ddsHudsonica)
# Note that the names are important and have to be specific to line up the diagram
fit1 <- euler(c("F0" = 3637, "F4" = 171, "F0&F4" = 55))
plot(fit1,  lty = 1:3, quantities = list(cex = 2))
plot2 <- plot(fit1, quantities = list(cex=2), fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 25))
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Hudsonica",
color = "black", face = "bold", size = 12))
# Note that the names are important and have to be specific to line up the diagram
fit1 <- euler(c("F1" = 1193, "F3" = 453, "F1&F3" = 73))
plot(fit1,  lty = 1:3, quantities = list(cex=2))
plot2 <- plot(fit1, quantities = list(cex=2), fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 4))
annotate_figure(plot2, top = text_grob("Shared Generational Genes in OWA vs AM in Tonsa",
color = "black", face = "bold", size = 12))
plot2 <- plot(fit1, quantities = list(cex=2), fill = wes_palette("GrandBudapest1"),
lty = 1:3,
labels = list(font = 4))
plot2
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
# Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
# Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
# Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
# Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
################################################################
# First, press command-D on mac or ctrl-shift-H in Rstudio and navigate to the directory containing scripts and input files. Then edit, mark and execute the following bits of code, one after another.
setwd("C:/Users/bjork/Documents/GitHub/Ecological_Genomics_23/PopGenomics/scripts/GOMWU")
# TONSA F1
input="res_Tonsa_F1_HHHHvsAAAA_LFC.csv" # two columns of comma-separated values: gene id, continuous measure of significance. To perform standard GO enrichment analysis based on Fisher's exact test, use binary measure (0 or 1, i.e., either sgnificant or not).
goAnnotations="dge_F1_GOterms.corrected.out" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml
goDivision="BP" # either MF, or BP, or CC
source("gomwu.functions.R")
gomwuStats(input, goDatabase, goAnnotations, goDivision,
perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already
largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes
smallest=5,   # a GO category should contain at least this many genes to be considered
clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.
#	Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead.
# Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)
# Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module
)
